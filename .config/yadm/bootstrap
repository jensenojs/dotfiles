#!/bin/bash

# YADM Bootstrap 脚本
# 此脚本是 yadm bootstrap 过程的主入口点。
# 它会执行 ~/.config/yadm/bootstrap.d 目录中的所有可执行文件。
# 
# 用法:
#   ~/.config/yadm/bootstrap        # 正常执行
#   ~/.config/yadm/bootstrap --dryrun  # 干运行模式 (打印命令但不执行)

# 设置 bash 的严格模式:
# -e: 如果命令以非零状态退出，则立即退出
# -u: 在替换时将未设置的变量视为错误
# -o pipefail: 管道的返回状态是最后一个以非零状态退出的命令的状态
set -euo pipefail

# 引入工具函数和常量
source ${HOME}/.config/yadm/utils.sh
source ${HOME}/.config/yadm/constants.sh

# 在 bootstrap 过程中询问密码以保持 sudo 会话活跃
ask_password

# 检查 --dryrun 标志
if [[ $# == 1 && $1 == '--dryrun' ]]; then
	dryrun=1
	log "INFO" "以干运行模式运行"
else
	dryrun=0
fi

# ================================================================================================

# 包含 bootstrap 脚本的目录
BOOTSTRAP_D="${BASH_SOURCE[0]}.d"
if [[ ! -d "$BOOTSTRAP_D" ]]; then
	echo "错误: 找不到 bootstrap 目录 '$BOOTSTRAP_D'" >&2
	exit 1
fi

# 查找并按排序顺序执行所有有效的 bootstrap 脚本
# -L: 跟随符号链接
# -type f: 仅匹配文件
find -L "$BOOTSTRAP_D" -type f |
	# 按字母顺序排序文件
	sort |
	# 遍历每个文件
	# IFS= 和 -r 防止文件名中空格和反斜杠的问题
	while IFS= read -r bootstrap; do
		# 检查文件是否可执行且不是模板或备份
		# 模板文件名中包含 ##，备份文件名以 ~ 结尾
		if [[ -x "$bootstrap" && ! "$bootstrap" =~ "##" && ! "$bootstrap" =~ "~$" ]]; then
			# 显式将 stdin 设置为 /dev/tty 以防止 stdin 重定向的问题
			# 这种问题可能会终止循环
			if ! "$bootstrap" </dev/tty; then
				echo "错误: bootstrap '$bootstrap' 失败" >&2
				exit 1
			fi
		fi
	done
